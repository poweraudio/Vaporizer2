# This file was generated by FRUT's Jucer2CMake from "VASTvaporizer.jucer"

cmake_minimum_required(VERSION 3.15)

cmake_policy(SET CMP0091 NEW)

file(STRINGS VERSION PLUGIN_VERSION)
option(USE_SYSTEM_JUCE "Use system installation of juce" OFF)
set(VST2_SDK_LOCATION "" CACHE STRING "Steinberg VST2 SDK directory for non-FOSS builds")
set(AAX_SDK_LOCATION "" CACHE STRING "Avid AAX SDK directory for non-FOSS builds")
set(ASIO_SDK_LOCATION "" CACHE STRING "Steinberg ASIO SDK directory for non-FOSS builds")
option(BUILD_AVX "Build AVX optimized code" ON)
option(BUILD_32 "Build for 32bit" OFF)
option(VASTBUILD "Build compatibility version for existing licenses distributed by VAST Dynamics Software as installers" OFF)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

if(EXISTS "VASTvaporizer/Source/Plugin/VASTCommercial/VASTLicense.h")
  set(VASTBUILD ON CACHE BOOL "Build compatibility version for existing licenses distributed by VAST Dynamics Software as installers" FORCE)
endif()

message(STATUS "Building VAST Dynamics Vaporizer2 plugin, version ${PLUGIN_VERSION} on architecture: ${CMAKE_GENERATOR_PLATFORM} with CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")

#new: all targets are build with project name "VASTvaporizer2" compatibility with old filenames will be guaranteed by installer if needed
project("VASTvaporizer2")
message(STATUS "Project name " ${PROJECT_NAME})

if(NOT USE_SYSTEM_JUCE)
  message(STATUS "Using JUCE from source tree")
  add_subdirectory("${CMAKE_SOURCE_DIR}/JUCE" ${CMAKE_BINARY_DIR}/JUCE EXCLUDE_FROM_ALL)
else()
  message(STATUS "Using system provided JUCE")
  find_package(JUCE CONFIG REQUIRED)
endif(NOT USE_SYSTEM_JUCE)

add_subdirectory(clap-juce-extensions ${CMAKE_BINARY_DIR}/clap-juce-extensions EXCLUDE_FROM_ALL)

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

if(AAX_SDK_LOCATION)
    juce_set_aax_sdk_path(${AAX_SDK_LOCATION})
    message(STATUS "Enabling AAX - caution, non FOSS build")
    list(APPEND PLUGIN_FORMATS AAX)
endif(AAX_SDK_LOCATION)

if(VST2_SDK_LOCATION)
    juce_set_vst2_sdk_path(${VST2_SDK_LOCATION})
    message(STATUS "Enabling VST2 - caution, non FOSS build")
    list(APPEND PLUGIN_FORMATS VST)
endif(VST2_SDK_LOCATION)
list(APPEND PLUGIN_FORMATS VST3 AU Standalone LV2)

juce_add_plugin(${PROJECT_NAME}
  VERSION ${PLUGIN_VERSION}
  BUNDLE_ID "com.vastdynamics.VAST2"
  COMPANY_NAME "VAST Dynamics"
  COMPANY_COPYRIGHT "VAST Dynamics"
  COMPANY_WEBSITE "www.vast-dynamics.com"
  COMPANY_EMAIL "contact@vast-dynamics.com"
  FORMATS ${PLUGIN_FORMATS}
  PLUGIN_NAME "Vaporizer2"
  DESCRIPTION "VAST Dynamics Vaporizer2 Hybrid Synthesizer Plug-in"
  PLUGIN_MANUFACTURER_CODE "Vast"
  PLUGIN_CODE "Vap2"
  IS_SYNTH TRUE
  HARDENED_RUNTIME_ENABLED TRUE
  NEEDS_MIDI_INPUT TRUE
  LV2URI "https://www.vast-dynamics.com/plugins/VASTvaporizer2"
  AAX_IDENTIFIER "com.vastdynamics.VAST2"
  AAX_CATEGORY "AAX_ePlugInCategory_SWGenerators"
  AU_EXPORT_PREFIX "VAST2AU"
  AU_MAIN_TYPE "kAudioUnitType_MusicDevice"
  VST2_CATEGORY "kPlugCategSynth"
  VST3_CATEGORIES "Instrument Synth"
  ICON_BIG "VASTvaporizer/Resources/logokreisvdalpha.png"
  ICON_SMALL "VASTvaporizer/Resources/logokreisvdalpha.png"  
  PLUGINHOST_AU FALSE
)

clap_juce_extensions_plugin(TARGET ${PROJECT_NAME}
        CLAP_ID "com.vastdynamics.VAST2"
        CLAP_FEATURES instrument
)

juce_generate_juce_header(${PROJECT_NAME})

macro(remove_cxx_flag flag)
  string(REPLACE "${flag}" "" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
  string(REPLACE "${flag}" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  string(REPLACE "${flag}" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
endmacro()

if(MSVC)
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/w")
else()
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "-w")
endif(MSVC)

if (BUILD_AVX)  
  target_compile_definitions(${PROJECT_NAME} PRIVATE SSE_AVX=AVX)
else()
  target_compile_definitions(${PROJECT_NAME} PRIVATE SSE_AVX=SSE2 _SSE2_VERSION)
endif(BUILD_AVX)

target_compile_definitions(${PROJECT_NAME} PRIVATE VAST_FFT_FFTW3) #use FFTW3 

if(WIN32)
  message(STATUS "Building on Windows ${CMAKE_GENERATOR_PLATFORM} with AVX flags: ${BUILD_AVX}")  
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/Zc:preprocessor")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/Zc:wchar_t")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/Zc:forScope")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/fp:fast") #check it!
  #list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/fp:precise")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/MT") #/MT is static runtime
  #list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/MD") #/MD is dll runtime
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/MP")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/EHsc")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/GS")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/GL")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/Ox")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/Qvec-report:1")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/std:c++latest")
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "/WX-")
	  
  target_link_options(${PROJECT_NAME} BEFORE PUBLIC /LTCG /NXCOMPAT:NO)  
  target_compile_definitions(${PROJECT_NAME} PUBLIC _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS _UNICODE UNICODE)
  if(BUILD_32)
    target_compile_definitions(${PROJECT_NAME} PRIVATE _WIN32 _WIN32BIT NDEBUG)   
  else()#64bit
    target_compile_definitions(${PROJECT_NAME} PRIVATE _WIN64 _WIN64BIT NDEBUG)    
  endif(BUILD_32)
  
  if (BUILD_AVX)  
    target_compile_options(${PROJECT_NAME} PRIVATE /arch:AVX)
  endif(BUILD_AVX)
  
  if(ASIO_SDK_LOCATION) #ASIO is windows only
    message(STATUS "Including ASIO from ${ASIO_SDK_LOCATION}")
    target_compile_definitions(${PROJECT_NAME} PRIVATE JUCE_ASIO=1)
    target_include_directories(${PROJECT_NAME} PRIVATE ${ASIO_SDK_LOCATION}/common)
  endif(ASIO_SDK_LOCATION)
endif(WIN32)

macro (set_xcode_property TARGET XCODE_PROPERTY XCODE_VALUE)
    set_property (TARGET ${TARGET} PROPERTY 
        XCODE_ATTRIBUTE_${XCODE_PROPERTY} ${XCODE_VALUE})
endmacro (set_xcode_property)

if(APPLE)
  message(STATUS "Building on Apple macOS ${CMAKE_GENERATOR_PLATFORM} with AVX flags: ${BUILD_AVX}")
  message(STATUS "XCODE_VERSION: ${XCODE_VERSION}" )
  list(APPEND MY_PUBLIC_COMPILE_OPTIONS "-ffast-math")
  if(XCODE_VERSION MATCHES "15.0")
    target_compile_definitions(${PROJECT_NAME} PUBLIC JUCE_SILENCE_XCODE_15_LINKER_WARNING) #temporarily due to xcode 15 issue
    target_link_options(${PROJECT_NAME} PUBLIC -ld_classic) #temporarily due to xcode 15 issue
  endif()
  if(VASTBUILD) 
    set_xcode_property(${PROJECT_NAME} CODE_SIGN_STYLE "Manual")
    set_xcode_property(${PROJECT_NAME} DEVELOPMENT_TEAM "PK93HYD6ZN") 
    set_xcode_property(${PROJECT_NAME} CODE_SIGN_IDENTITY "Developer ID Application")
    set_xcode_property(${PROJECT_NAME} ENABLE_HARDENED_RUNTIME "TRUE")
  endif(VASTBUILD)
  
  if(CMAKE_BUILD_TYPE MATCHES Release)
    set_xcode_property(${PROJECT_NAME} GCC_GENERATE_DEBUGGING_SYMBOLS "NO")
	  set_xcode_property(${PROJECT_NAME} STRIP_INSTALLED_PRODUCT "YES")
	  set_xcode_property(${PROJECT_NAME} STRIP_INSTALLED_PRODUCT "YES")
	  set_xcode_property(${PROJECT_NAME} STRIP_TYLE "ALL")
	  set_xcode_property(${PROJECT_NAME} SEPARATE_STRIP "YES")
  endif()
  
  if(BUILD_AVX)  
    set_xcode_property(${PROJECT_NAME} CLANG_X86_VECTOR_INSTRUCTIONS "avx")
  endif(BUILD_AVX)

  if(BUILD_32)
    target_compile_options(${PROJECT_NAME} PUBLIC -m32)
    target_compile_definitions(${PROJECT_NAME} PRIVATE _MACOSX _MACOSX32BIT NDEBUG)
  else() #64bit
    target_compile_definitions(${PROJECT_NAME} PRIVATE _MACOSX _MACOSX64BIT NDEBUG)
  endif(BUILD_32)   
endif(APPLE)

if(UNIX AND NOT APPLE) #linux
  message(STATUS "Building on Linux ${CMAKE_GENERATOR_PLATFORM} with AVX flags: ${BUILD_AVX}")
endif(UNIX AND NOT APPLE)

target_compile_definitions(${PROJECT_NAME}
  PUBLIC
    DROWAUDIO_USE_CURL=disabled
    DROWAUDIO_USE_FFTREAL=disabled
    DROWAUDIO_USE_SOUNDTOUCH=disabled
    JUCE_JACK=1
    JUCE_PLUGINHOST_AU=0
    JUCE_USE_CURL=0
    JUCE_USE_MP3AUDIOFORMAT=1
    JUCE_VST3_CAN_REPLACE_VST2=0
    JUCE_WEB_BROWSER=0
    JUCE_WIN_PER_MONITOR_DPI_AWARE=0
    JUCE_DISPLAY_SPLASH_SCREEN=0
    JUCE_DSP_USE_STATIC_FFTW=1
)

target_compile_options(${PROJECT_NAME} 
	BEFORE PUBLIC         
	${MY_PUBLIC_COMPILE_OPTIONS}
)

target_sources(${PROJECT_NAME}
  PRIVATE
    "VASTvaporizer/Source/AnaMark-Tuning-Library/SCL_Import.cpp"
    "VASTvaporizer/Source/AnaMark-Tuning-Library/TUN_EmbedHTML.cpp"
    "VASTvaporizer/Source/AnaMark-Tuning-Library/TUN_Scale.cpp"
    "VASTvaporizer/Source/AnaMark-Tuning-Library/TUN_StringTools.cpp"
    "VASTvaporizer/Source/Engine/FX/FXUtils/VASTDDLModule.cpp"
    "VASTvaporizer/Source/Engine/FX/FXUtils/VASTDelayLine.cpp"
    "VASTvaporizer/Source/Engine/FX/FXUtils/VASTDelayLineAPF.cpp"
    "VASTvaporizer/Source/Engine/FX/FXUtils/VASTDelaySoftAdjust.cpp"
    "VASTvaporizer/Source/Engine/FX/FXUtils/VASTModDelayModule.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTAtomizer.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTBitcrush.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTChorus.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTCombFilterEffect.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTCompressorExpander.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTDistortion.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTEffect.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTEq.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTFlanger.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTFormantFilter.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTMultibandCompressor.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTMultibandCompressorSingleBand.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTPhaser.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTReverb.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTStereoDelay.cpp"
    "VASTvaporizer/Source/Engine/FX/VASTWaveshaper.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTBiQuadFilter.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTCombFilter.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTDelay.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTDelayAPF.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTLPFCombFilter.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTOnePoleLPF.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTQFilter.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTQFilterCoefficients.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTStateVariableFilter.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTVAOnePoleFilter.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTVAOnePoleFilterEx.cpp"
    "VASTvaporizer/Source/Engine/Filter/VASTVCFCombFilter.cpp"
    "VASTvaporizer/Source/Engine/Oscillator/VASTWaveTable.cpp"
    "VASTvaporizer/Source/Engine/Oscillator/VASTWaveTableOscillator.cpp"
    "VASTvaporizer/Source/Engine/Oversampler/VASTDecimator.cpp"
    "VASTvaporizer/Source/Engine/Oversampler/VASTInterpolator.cpp"
    "VASTvaporizer/Source/Engine/Oversampler/VASTOversampler.cpp"
    "VASTvaporizer/Source/Engine/Oversampler/VASTRateConvertor.cpp"
    "VASTvaporizer/Source/Engine/Utils/VASTEnvelopeDetector.cpp"
    "VASTvaporizer/Source/Engine/Utils/VASTFFTSingletonFactory.cpp"
    "VASTvaporizer/Source/Engine/Utils/VASTFloatVectorOperations.cpp"
    "VASTvaporizer/Source/Engine/VASTARPData.cpp"
    "VASTvaporizer/Source/Engine/VASTEnvelope.cpp"
    "VASTvaporizer/Source/Engine/VASTFXBus.cpp"
    "VASTvaporizer/Source/Engine/VASTMSEGData.cpp"
    "VASTvaporizer/Source/Engine/VASTMSEGEnvelope.cpp"
    "VASTvaporizer/Source/Engine/VASTOscillatorBank.cpp"
    "VASTvaporizer/Source/Engine/VASTParamState.cpp"
    "VASTvaporizer/Source/Engine/VASTPoly.cpp"
    "VASTvaporizer/Source/Engine/VASTSampler.cpp"
    "VASTvaporizer/Source/Engine/VASTSettings.cpp"
    "VASTvaporizer/Source/Engine/VASTSingleNote.cpp"
    "VASTvaporizer/Source/Engine/VASTSynthesiser.cpp"
    "VASTvaporizer/Source/Engine/VASTVca.cpp"
    "VASTvaporizer/Source/Engine/VASTVcf.cpp"
    "VASTvaporizer/Source/Engine/VASTXperience.cpp"
    "VASTvaporizer/Source/Plugin/VASTArpComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTAudioProcessor.cpp"
    "VASTvaporizer/Source/Plugin/VASTAudioProcessorEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTButton.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTComboBox.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTComboBrev.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTComboPreset.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTConcertinaPanel.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTDragFX.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTDragMatrix.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTDragSource.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTDrawableButton.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTImageButton.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTManualDualValueEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTManualFreqdomainValueEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTManualRenameEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTManualScaleEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTManualTagsEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTManualValueEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTModwheelSlider.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTParameterButton.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTParameterComboBox.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTParameterSlider.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTPitchbendSlider.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTPopupHandler.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTPositionEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTControls/VASTSlider.cpp"
    "VASTvaporizer/Source/Plugin/VASTFX/VASTFXEffectPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTFX/VASTFXPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTFX/VASTFXSelectionPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTFX/VASTGenericEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTFX/VASTGenericSelector.cpp"
    "VASTvaporizer/Source/Plugin/VASTFXComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTFilterComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTGeneratorsComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTGUIRuntimeModel.cpp"
    "VASTvaporizer/Source/Plugin/VASTHeaderComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTKeyboardComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTLFOMsegComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTLogoComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTARPEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTARPEditorPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTLFOEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTLFOEditorPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTMSEGEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTMSEGEditorPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTStepSeqEditor.cpp"
    "VASTvaporizer/Source/Plugin/VASTMSEGEditor/VASTStepSeqEditorPane.cpp"
    "VASTvaporizer/Source/Plugin/VASTMasterVoicingComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTMatrixComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTOscillatorComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTPreset/VASTPresetComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTPreset/VASTPresetData.cpp"
    "VASTvaporizer/Source/Plugin/VASTPreset/VASTPresetStars.cpp"
    "VASTvaporizer/Source/Plugin/VASTPreset/VASTPresetTreeHeader.cpp"
    "VASTvaporizer/Source/Plugin/VASTPresetEditorComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTSamplerEditorComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTSamplerEditorComponentHeader.cpp"
    "VASTvaporizer/Source/Plugin/VASTSamplerNoiseComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTScopeDisplay/VASTFilterDisplay.cpp"
    "VASTvaporizer/Source/Plugin/VASTScopeDisplay/VASTModMatCurveDisplay.cpp"
    "VASTvaporizer/Source/Plugin/VASTScopeDisplay/VASTOscilloscope.cpp"
    "VASTvaporizer/Source/Plugin/VASTScopeDisplay/VASTOscilloscopeOGL2D.cpp"
    "VASTvaporizer/Source/Plugin/VASTSidePanelComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTSidePanelHeader.cpp"
    "VASTvaporizer/Source/Plugin/VASTUtils/VASTLookAndFeel.cpp"
    "VASTvaporizer/Source/Plugin/VASTUtils/VASTLookAndFeelThemeDark.cpp"
    "VASTvaporizer/Source/Plugin/VASTUtils/VASTLookAndFeelThemeDefault.cpp"
    "VASTvaporizer/Source/Plugin/VASTUtils/VASTLookAndFeelThemeIce.cpp"
    "VASTvaporizer/Source/Plugin/VASTUtils/VASTLookAndFeelThemeTech.cpp"
    "VASTvaporizer/Source/Plugin/VASTUtils/VASTUndoableWavetableAction.cpp"
    "VASTvaporizer/Source/Plugin/VASTVUMeter.cpp"
    "VASTvaporizer/Source/Plugin/VASTVaporizerComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTWTEditor/VASTFreqDomainViewport.cpp"
    "VASTvaporizer/Source/Plugin/VASTWTEditor/VASTPositionViewport.cpp"
    "VASTvaporizer/Source/Plugin/VASTWTEditor/VASTSamplerViewport.cpp"
    "VASTvaporizer/Source/Plugin/VASTWaveTableEditorComponent.cpp"
    "VASTvaporizer/Source/Plugin/VASTWaveTableEditorView.cpp"
    "VASTvaporizer/Source/Plugin/VASTWaveTableEditorViewHeader.cpp"
    "VASTvaporizer/Source/muFFT/cpu.c"
    "VASTvaporizer/Source/muFFT/fft.c"
    "VASTvaporizer/Source/muFFT/kernel.c"
)

if(VASTBUILD) 
  message(STATUS "Building as VASTBUILD")
  target_sources(${PROJECT_NAME}
  PRIVATE
    "VASTvaporizer/Source/Plugin/VASTCommercial/VASTLicense.cpp"
    "VASTvaporizer/Source/Plugin/VASTCommercial/VASTLicenseEditor.cpp"
  )
  #target_compile_definitions(${PROJECT_NAME} PRIVATE VASTBUILD VASTLOG)
  target_compile_definitions(${PROJECT_NAME} PRIVATE VASTBUILD)
endif(VASTBUILD)

juce_add_binary_data(VASTvaporizer2_BinaryData
  SOURCES
    "VASTvaporizer/Resources/Fonts/AlteHaasGroteskBold.ttf"
    "VASTvaporizer/Resources/Fonts/AlteHaasGroteskRegular.ttf"
    "VASTvaporizer/Resources/Fonts/OpenSans-Bold.ttf"
    "VASTvaporizer/Resources/Fonts/OpenSans-Regular.ttf"
    "VASTvaporizer/Resources/Fonts/SFUIDisplay-Bold.ttf"
    "VASTvaporizer/Resources/Fonts/SFUIDisplay-Regular.ttf"
    "VASTvaporizer/Resources/Fonts/Trade Gothic LT Bold.ttf"
    "VASTvaporizer/Resources/Fonts/Trade Gothic LT.ttf"
    "VASTvaporizer/Resources/logokreis.svg"
    "VASTvaporizer/Resources/logokreisvdalpha.png"
)

set_target_properties(VASTvaporizer2_BinaryData PROPERTIES POSITION_INDEPENDENT_CODE TRUE)

target_compile_options(VASTvaporizer2_BinaryData
	BEFORE PUBLIC         
	${MY_PUBLIC_COMPILE_OPTIONS}
)

if(UNIX AND NOT APPLE) #linux
  target_link_libraries(${PROJECT_NAME} PRIVATE atomic)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules (FFTW3F REQUIRED fftw3f)
else()
  add_library(fftw3f STATIC IMPORTED)
endif(UNIX AND NOT APPLE)

if(WIN32)
  set_property(TARGET fftw3f PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
  set_target_properties(fftw3f PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/fftw-3.3.10/lib/fftw3f.lib)
endif()
if(APPLE)
  #find_package(PkgConfig REQUIRED)
  #pkg_check_modules (FFTW3F REQUIRED fftw3f)
  #target_link_options(${PROJECT_NAME} PUBLIC -L${CMAKE_SOURCE_DIR}/fftw-3.3.10/lib)
  if(BUILD_AVX)
    #target_link_options(${PROJECT_NAME} PUBLIC -lfftw3f_x64)
    set_target_properties(fftw3f PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/fftw-3.3.10/lib/libfftw3f_x64.a)
  else()
    #target_link_options(${PROJECT_NAME} PUBLIC -lfftw3f_universal)
    set_target_properties(fftw3f PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/fftw-3.3.10/lib/libfftw3f_universal.a) 
  endif()
endif()

target_link_libraries(${PROJECT_NAME}
  PRIVATE
    VASTvaporizer2_BinaryData
    juce::juce_audio_basics
    juce::juce_audio_devices
    juce::juce_audio_formats
    juce::juce_audio_plugin_client
    juce::juce_audio_processors
    juce::juce_audio_utils
    juce::juce_core
    juce::juce_cryptography
    juce::juce_data_structures
    juce::juce_dsp
    juce::juce_events
    juce::juce_graphics
    juce::juce_gui_basics
    juce::juce_gui_extra
    juce::juce_opengl
    fftw3f
)

if(NOT WIN32)
  target_link_libraries(${PROJECT_NAME}
    PUBLIC
      juce::juce_recommended_config_flags
      juce::juce_recommended_lto_flags
      juce::juce_recommended_warning_flags
  )
endif(NOT WIN32)

get_target_property(MAIN_CFLAGS ${PROJECT_NAME} COMPILE_OPTIONS)
message("-- COMPILE_OPTIONS compiler flags are: ${MAIN_CFLAGS}")
message("-- CMAKE_CXX_FLAGS compiler flags are: ${CMAKE_CXX_FLAGS}")
message("-- CMAKE_CXX_FLAGS_RELEASE compiler flags are: ${CMAKE_CXX_FLAGS_RELEASE}")

include(GNUInstallDirs)

target_compile_definitions(${PROJECT_NAME} PRIVATE
  CMAKE_INSTALL_FULL_DATAROOTDIR="${CMAKE_INSTALL_FULL_DATAROOTDIR}"
)

if(TARGET ${PROJECT_NAME}_Standalone)
  install(TARGETS ${PROJECT_NAME}_Standalone DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()

foreach(format VST VST3 LV2)
  if(TARGET ${PROJECT_NAME}_${format})
    get_target_property(output ${PROJECT_NAME}_${format} JUCE_PLUGIN_ARTEFACT_FILE)
    install(DIRECTORY ${output} DESTINATION ${CMAKE_INSTALL_LIBDIR}/$<LOWER_CASE:${format}>)
  endif()
endforeach()

if(TARGET ${PROJECT_NAME}_CLAP)
  install(TARGETS ${PROJECT_NAME}_CLAP DESTINATION ${CMAKE_INSTALL_LIBDIR}/clap)
endif()

foreach(data Noises Tables Presets)
  install(DIRECTORY ${CMAKE_SOURCE_DIR}/VASTvaporizer/${data} DESTINATION
    ${CMAKE_INSTALL_DATAROOTDIR}/Vaporizer2
  )
endforeach()
